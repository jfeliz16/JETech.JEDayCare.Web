@model IEnumerable<JETech.JEDayCare.Core.Clients.Models.ClientModel>
@using JETech.JEDayCare.Core.Clients.Models;
@{
    ViewData["Title"] = "Childs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <!-- Area Chart -->
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                @*<h6 class="m-0 font-weight-bold text-primary">Earnings Overview</h6>*@
                <h5 class="title-form">@(ViewData["Title"])</h5>
                <div class="header-form">
                    <div class="row justify-content-end">
                        <div class="header-form-item">
                            @(Html.DevExtreme().Button()
                                .Text("New")
                                .Icon("plus")
                                .Type(ButtonType.Default)
                                .OnClick(@<text>
                                             function(){ window.location = "@Url.Action("Create", "ClientMant")"; }
                                         </text>)
                            )
                        </div>
                        <div class="header-form-item">
                            @(Html.DevExtreme().Button()
                            .Text("Refresh")
                            .Icon("refresh")
                            .Type(ButtonType.Normal)
                            .OnClick("onRefreshGrid")
                            )
                        </div>
                        <div class="header-form-item">
                            @(Html.DevExtreme().Button()                                
                                .Text("Print")
                                .Icon("print")
                                .Type(ButtonType.Normal)
                                .OnClick(@<text>function(){ window.location = "@Url.Action("Create", "ClientMant")";}
                                                             </text>)
                                                    )
                        </div>                   
                        <div class="header-form-item">
                            @(Html.DevExtreme().Menu()
                                .ID("menu")
                                .DataSource(d => d.Mvc().LoadAction("GetActions"))
                                .HideSubmenuOnMouseLeave(false)
                                .OnItemClick("onActionClick")
                                .CssClass("jet-menu-button")
                                )
                            <div id="product-details" class="hidden">
                                <div class="text"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div>
                @(Html.DevExtreme().DataGrid<ClientModel>()
            .ID("gridClients")
            .ShowBorders(true)
            .RemoteOperations(c => c.GroupPaging(true)) //Enabled pagination
            .FilterRow(filter => filter
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                .ShowOperationChooser(false))
            .DataSource(new JS("store"))
            .OnRowDblClick("onDblClick")
            //.RowAlternationEnabled(true)
            //.DataSource(d => d.StaticJson().Url("~/api/ClientMantApi/").Key("Id"))
            .FocusedRowEnabled(true)
            .Paging(paging =>
                paging.PageSize(10))
            .Pager(pager =>
            {
                pager.ShowPageSizeSelector(true);
                pager.AllowedPageSizes(new[] { 5, 10, 20 });
                pager.ShowInfo(true);
            })
            .Columns(columns =>
            {
                columns.AddFor(c => c.Id)
                        .Width("10%");
                columns.AddFor(c => c.FullName);
                columns.AddFor(c => c.Parent.FullName)
                        .Caption("Parent");
                columns.Add()
                       .Caption("Actions")
                       .Type(GridCommandColumnType.Buttons)
                       .Width(110)
                       .Buttons(b =>
                       {
                           b.Add()
                            .Hint("Edit")
                            .Icon("edit")
                            .OnClick("onEdit");
                           b.Add()
                            .Hint("Detail")
                            .Icon("card")
                            .OnClick("onDetail");
                       });
                columns.AddFor(c => c.StatusName)
                   .Width("10%");
                /*columns.Add()
                        .Caption("Actions")
                        .Width("10%")
                        .AllowFiltering(false)
                        .AllowSorting(false)
                        .CellTemplate(@<text>
                                <div>
                                      @*<a href="@Url.Action("Details","ClientMant")/<%- data.Id %>">Details</a>
                                      <p><%- data.Id %></p>
                                      @(Html.DevExtreme().Button()
                                      .Icon("search")
                                      .Type(ButtonType.Normal)
                                      )*@
                                    @(Html.DevExtreme().Button()
                                        .Width("30px")
                                        .Height("30px")
                                        .Icon("search")
                                        .Type(ButtonType.Normal)
                                        )
                                     @(Html.DevExtreme().Button()
                                        .Width("30px")
                                        .Height("30px")
                                        .Icon("edit")
                                        .Type(ButtonType.Normal)
                                        .OnClick("onEdit()"))
                                </div>
                            </text>);
                    })
                )
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @{ await Html.RenderPartialAsync("_Notification");}
}

<script>
    $(document).ready(function () {
        var notiMessage = @Html.Raw(Json.Serialize(ViewBag.NotiMessage));

        if (notiMessage != null) {
            showNotification(notiMessage,2 * 1000);
        }
    })

    function onEdit(e) {
        if (e) {
            window.location = '@Url.Action("Edit", "ClientMant")' + '/' + e.row.data.Id;
        }
    }

    function onDetail(e) {
        if (e) {
            window.location = '@Url.Action("Details", "ClientMant")' + '/' + e.row.data.Id;
        }
    }

    function getMenuInstance() {
        console.log("intancing menu");
        return $("#menu").dxMenu("instance");
    };

    function onActionClick(data) {
        var item = data.itemData;

        if (item.Name) {
            $("#product-details").removeClass("hidden");
            $("#product-details > .text").text(item.Name);
        }
    };

    function onRefreshGrid() {
        var dataGrid = $("#gridClients").dxDataGrid("instance");
        dataGrid.refresh()
    };

    function onDblClick(e){
        window.location = '@Url.Action("Details","ClientMant")' + '/' + e.data.Id;
    };

    function isNotEmpty(value) {
        return value !== undefined && value !== null && value !== "";
    };

    var store = new DevExpress.data.CustomStore({
        key: "Id",
        //remoteOperations: { groupPaging: true },
        load: function (loadOptions) {
            var deferred = $.Deferred(),
                args = {};

            [
                "skip",
                "take",
                "requireTotalCount",
                "requireGroupCount",
                "sort",
                "filter",
                "totalSummary",
                "group",
                "groupSummary"
            ].forEach(function (i) {
                if (i in loadOptions && isNotEmpty(loadOptions[i]))
                    args[i] = JSON.stringify(loadOptions[i]);
            });

            //alert(JSON.stringify(args));

            var argsData = {
                "CondictionString": args.filter,
                "PageArgs": {
                    "Skip": parseInt(args.skip),
                    "Size": parseInt(args.take)
                }
            };

            $.ajax({
                type: 'POST',
                url: 'https://'+'@Context.Request.Host' + '/api/Client/GetAjax',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(argsData),
                success: function (result) {
                    //deferred.resolve(result.Data);
                    deferred.resolve(result.Data, {
                        totalCount: result.TotalCount
                    });
                },
                error: function (error) {

                    deferred.reject("Data Loading Error");
                },
                timeout: 5000
            });

            return deferred.promise();
        }
    });
</script>